akka {
  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "br.com.diegosilva.home.CborSerializable" = jackson-cbor
    }
  }

  remote.artery {
    canonical.port = 2551
    canonical.port = ${?CANONICAL_PORT}
    canonical.port = ${?canonical.port}
    canonical.hostname = 127.0.0.1
    canonical.hostname = ${?CANONICAL_HOST_NAME}
    canonical.hostname = ${?canonical.hostname}
  }

  cluster {
    seed-nodes = [
      "akka://Automation@127.0.0.1:2551",
      "akka://Automation@127.0.0.1:2552"
    ]

    sharding {
          number-of-shards = 100
    }
  }
}

akka.cluster.downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
akka.cluster.split-brain-resolver {
  active-strategy = keep-majority
  stable-after = 20s
  down-all-when-unstable = on
}

akka.actor.typed.extensions = ["br.com.diegosilva.home.database.DatabasePool", "br.com.diegosilva.home.ext.SpawnExtension"]

automation.http.port = 8080
automation.http.port = ${?HTTP_PORT}
automation.http.port = ${?http.port}
automation.askTimeout = 10 s

serial.interface = "rxtx"
serial.interface = ${?SERIAL_INTERFACE}
serial.interface = ${?serial.interface}

serial.receptor = true
serial.receptor = ${?SERIAL_RECEPTOR}
serial.receptor = ${?serial.receptor}

serial.port = /dev/cu.usbmodem142201
serial.port = ${?SERIAL_PORT}
serial.port = ${?serial.port}

rfnetwork.node = 00
rfnetwork.node = ${?RF_NETWORK_ADDRESS}
rfnetwork.node = ${?rfnetwork.address}

database = {
  connectionPool = "HikariCP"
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    serverName = "192.168.31.142"
    portNumber = "5432"
    databaseName = "postgres"
    user = "postgres"
    password = "postgres"
  }
  numThreads = 10
}

